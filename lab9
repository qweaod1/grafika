from PIL import Image, ImageOps, ImageChops
import numpy as np
import matplotlib.pyplot as plt
from PIL import ImageStat as stat

# 1. Load and convert image to 'L' mode
obraz = Image.open('zeby.png')
obraz_l = obraz.convert('L')

# 2. Histogram functions
def histogram_norm(image):
    hist = image.histogram()
    norm_hist = [float(h) / sum(hist) for h in hist]
    return norm_hist

def histogram_cumul(image):
    hist = image.histogram()
    cumul_hist = [sum(hist[:i+1]) for i in range(len(hist))]
    return cumul_hist

def histogram_equalization(image):
    equalized_image = ImageOps.equalize(image, mask=None)
    return equalized_image

def statystyki(im):
    s = stat.Stat(im)
    print("extrema ", s.extrema)  # max and min
    print("count ", s.count)  # count
    print("mean ", s.mean)  # mean
    print("median ", s.median)  # median
    print("stddev ", s.stddev)  # standard deviation

# 2.1 Histogram normalized
hist_norm_obraz = histogram_norm(obraz_l)

# 2.2 Histogram cumulative
hist_cumul_obraz = histogram_cumul(obraz_l)

# 2.3 Histogram equalization
obraz_equalized = histogram_equalization(obraz_l)
obraz_equalized.save('equalized.png')

# 2.4 Plot histograms
plt.figure(figsize=(12, 6))
plt.subplot(2, 3, 1)
plt.title("Original Image")
plt.imshow(obraz_l, cmap='gray')

plt.subplot(2, 3, 2)
plt.title("Histogram - Original")
plt.bar(range(256), histogram_norm(obraz_l), color='b', alpha=0.8)

plt.subplot(2, 3, 3)
plt.title("Histogram Cumulative - Original")
plt.plot(histogram_cumul(obraz_l))

plt.subplot(2, 3, 4)
plt.title("Equalized Image")
plt.imshow(obraz_equalized, cmap='gray')

plt.subplot(2, 3, 5)
plt.title("Histogram - Equalized")
plt.bar(range(256), histogram_norm(obraz_equalized), color='b', alpha=0.8)

plt.subplot(2, 3, 6)
plt.title("Histogram Cumulative - Equalized")
plt.plot(histogram_cumul(obraz_equalized))

plt.tight_layout()
plt.savefig('fig1.png')
plt.show()

# 2.5 Comment on differences between the original and equalized images based on statistics
statystyki(obraz_l)
statystyki(obraz_equalized)

# 3. ImageOps.equalize method
obraz_equalized1 = ImageOps.equalize(obraz, mask=None)
obraz_equalized1.save('equalized1.png')

# 3.1 Plot images from points 2 and 3
plt.figure(figsize=(12, 6))
plt.subplot(1, 3, 1)
plt.title("Original Image")
plt.imshow(obraz)

plt.subplot(1, 3, 2)
plt.title("Equalized Image (Custom Function)")
plt.imshow(obraz_equalized, cmap='gray')

plt.subplot(1, 3, 3)
plt.title("Equalized Image (ImageOps)")
plt.imshow(obraz_equalized1, cmap='gray')

plt.tight_layout()
plt.savefig('fig2.png')
plt.show()

# 3.2 Comment on differences between images from points 2 and 3
# The differences may arise from variations in the internal algorithms used by the functions.

# 4. Custom conversion function
def konwertuj1(obraz, w_r, w_g, w_b):
    r, g, b = obraz.split()
    l = Image.merge('RGB', (
        r.point(lambda p: round(p * w_r)),
        g.point(lambda p: round(p * w_g)),
        b.point(lambda p: round(p * w_b))
    ))
    return l.convert('L')

# 4.1 Apply the custom conversion function
mgla_obraz = Image.open('mgla.jpg')
mgla_L1 = konwertuj1(mgla_obraz, 299/1000, 587/1000, 114/1000)
mgla_L1.save('mgla_L1.png')

# 4.2 Evaluate differences between images
statystyki(mgla_L1)
statystyki(mgla_obraz.convert('L'))

# 4.3 Apply the custom conversion function with int() instead of round()
def konwertuj2(obraz, w_r, w_g, w_b):
    r, g, b = obraz.split()
    l = Image.merge('RGB', (
        r.point(lambda p: int(p * w_r)),
        g.point(lambda p: int(p * w_g)),
        b.point(lambda p: int(p * w_b))
    ))
    return l.convert('L')

mgla_L2 = konwertuj2(mgla_obraz, 299/1000, 587/1000, 114/1000)
mgla_L2.save('mgla_L2.png')

# 4.2 Evaluate differences between images with int() instead of round()
statystyki(mgla_L2)
