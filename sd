from PIL import Image
import numpy as np
from PIL import ImageChops
from PIL import ImageStat as stat
import matplotlib
import matplotlib.pyplot as plt
matplotlib.use('TkAgg')
from random import randint

#Wojciech Kowalczyk 2 IO 166285
diff = Image.open('diff.png')
print("tryb", diff.mode)
print("format", diff.format)
print("rozmiar", diff.size)
def statystyki(im):
    s = stat.Stat(im)
    print("extrema ", s.extrema)
    print("count ", s.count)
    print("mean ", s.mean)
    print("median ", s.median)
    print("stddev ", s.stddev)
statystyki(diff)

#b

def rysuj_histogram_RGB(obraz):
    hist = obraz.histogram()
    plt.title("histogram  ")
    plt.bar(range(256), hist[:256], color='r', alpha=0.5)
    plt.bar(range(256), hist[256:2 * 256], color='g', alpha=0.4)
    plt.bar(range(256), hist[2 * 256:], color='b', alpha=0.3)
    plt.savefig("histogram1.png")
#rysuj_histogram_RGB(diff)

#c
def zlicz_roznice_srednia_RGB(obraz, wsp):
    t_obraz = np.asarray(obraz)
    h, w, d = t_obraz.shape
    zlicz = 0
    for i in range(h):
        for j in range(w):
                if np.mean(t_obraz[i, j, :]) > wsp:
                    zlicz = zlicz + 1
    procent = zlicz/(h*w)
    return zlicz, procent

print(zlicz_roznice_srednia_RGB(diff, 5))
print(zlicz_roznice_srednia_RGB(diff, 25))
print(zlicz_roznice_srednia_RGB(diff, 50))
#d

def zlicz_roznice_suma_RGB(obraz, wsp):
    t_obraz = np.asarray(obraz)
    h, w, d = t_obraz.shape
    zlicz = 0
    for i in range(h):
        for j in range(w):
                if sum(t_obraz[i, j, :]) > wsp:
                    zlicz = zlicz + 1
    procent = zlicz/(h*w)
    return zlicz, procent
print(zlicz_roznice_suma_RGB(diff, 5))
print(zlicz_roznice_suma_RGB(diff, 25))
print(zlicz_roznice_suma_RGB(diff, 50))

im1 = Image.open('jesienn.jpg')
im1.save('obraz1.jpg')
im1 = Image.open('obraz1.jpg')
im1.save('obraz2.jpg')
im1 = Image.open('obraz2.jpg')
im1.save('obraz3.jpg')
im1 = Image.open('obraz3.jpg')
im1.save('obraz4.jpg')
im1 = Image.open('obraz4.jpg')
im1.save('obraz5.jpg')
im1 = Image.open('obraz5.jpg')

im_kod = Image.open('kod.bmp')


def ukryj_kod(obraz, im_kod):
    t_obraz = np.asarray(obraz)
    t_kodowany = t_obraz.copy()
    h, w, d = t_obraz.shape
    t_kod = np.asarray(im_kod)
    for i in range(h):
        for j in range(w):
            if t_kod[i, j] > 0:
                k = randint(0,2)
                t_kodowany[i, j, k] = t_obraz[i, j, k] + 1
    return Image.fromarray(t_kodowany)

im_kodowany = ukryj_kod(im1, im_kod)
im_kodowany

def odkoduj(obraz1, obraz2):
    obraz1 = obraz1.convert('RGB')
    obraz2 = obraz2.convert('RGB')

    t_obraz1 = np.asarray(obraz1)
    t_obraz2 = np.asarray(obraz2)

    print("Shape obraz1:", t_obraz1.shape)
    print("Shape obraz2:", t_obraz2.shape)

    if t_obraz1.shape != t_obraz2.shape:
        raise ValueError("Obrazy mają różne rozmiary")

    obraz_wynikowy = Image.new('L', obraz1.size)

    for i in range(obraz1.size[0]):
        for j in range(obraz1.size[1]):
            if np.array_equal(t_obraz1[i, j], t_obraz2[i, j]):
                obraz_wynikowy.putpixel((i, j), 0)
            else:
                obraz_wynikowy.putpixel((i, j), 255)

    return obraz_wynikowy

im1 = Image.open('jesienn.jpg')
im_kodowany1 = Image.open('zakodowany1.bmp')

obraz_wynikowy = odkoduj(im1, im_kodowany1)
obraz_wynikowy.save('kod_odkodowany.bmp')
